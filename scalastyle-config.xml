<scalastyle>
    <name>Scalastyle standard configuration</name>

    <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[100]]></parameter>
            <parameter name="tabSize"><![CDATA[2]]></parameter>
            <parameter name="ignoreImports">true</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters><parameter name="regex"><![CDATA[(config|[A-Z][A-Za-z]*)]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
        <parameters><parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter></parameters>
    </check>

    <check customId="argcount" level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
        <parameters><parameter name="maxParameters"><![CDATA[10]]></parameter></parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"></check>

    <check customId="nonascii" level="error" class="org.scalastyle.scalariform.NonASCIICharacterChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>

    <!-- ??? usually shouldn't be checked into the code base. -->
    <check level="error" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"></check>

    <check customId="hadoopconfiguration" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters><parameter name="regex">spark(.sqlContext)?.sparkContext.hadoopConfiguration</parameter></parameters>
        <customMessage><![CDATA[
      Are you sure that you want to use sparkContext.hadoopConfiguration? In most cases, you should use
      spark.sessionState.newHadoopConf() instead, so that the hadoop configurations specified in Spark session
      configuration will come into effect.
      If you must use sparkContext.hadoopConfiguration, wrap the code block with
      // scalastyle:off hadoopconfiguration
      spark.sparkContext.hadoopConfiguration...
      // scalastyle:on hadoopconfiguration
    ]]></customMessage>
    </check>

    <check customId="commonslang2" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters><parameter name="regex">org\.apache\.commons\.lang\.</parameter></parameters>
        <customMessage>Use Commons Lang 3 classes (package org.apache.commons.lang3.*) instead
            of Commons Lang 2 (package org.apache.commons.lang.*)</customMessage>
    </check>

    <check customId="FileSystemGet" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters><parameter name="regex">FileSystem.get\([a-zA-Z_$][a-zA-Z_$0-9]*\)</parameter></parameters>
        <customMessage><![CDATA[
      Are you sure that you want to use "FileSystem.get(Configuration conf)"? If the input
      configuration is not set properly, a default FileSystem instance will be returned. It can
      lead to errors when you deal with multiple file systems. Please consider using
      "FileSystem.get(URI uri, Configuration conf)" or "Path.getFileSystem(Configuration conf)" instead.
      If you must use the method "FileSystem.get(Configuration conf)", wrap the code block with
      // scalastyle:off FileSystemGet
      FileSystem.get(...)
      // scalastyle:on FileSystemGet
    ]]></customMessage>
    </check>


    <check level="error" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="true">
        <parameters>
            <parameter name="groups">java,scala,3rdParty,spark</parameter>
            <parameter name="group.java">javax?\..*</parameter>
            <parameter name="group.scala">scala\..*</parameter>
            <parameter name="group.3rdParty">(?!org\.apache\.spark\.).*</parameter>
            <parameter name="group.spark">org\.apache\.spark\..*</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">COMMA</parameter>
        </parameters>
    </check>

    <!-- SPARK-3854: Single Space between ')' and '{' -->
    <check customId="SingleSpaceBetweenRParenAndLCurlyBrace" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters><parameter name="regex">\)\{</parameter></parameters>
        <customMessage><![CDATA[
      Single Space between ')' and `{`.
    ]]></customMessage>
    </check>


    <check customId="OmitBracesInCase" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters><parameter name="regex">case[^\n>]*=>\s*\{</parameter></parameters>
        <customMessage>Omit braces in case clauses.</customMessage>
    </check>

    <!-- SPARK-16877: Avoid Java annotations -->
    <check level="error" class="org.scalastyle.scalariform.OverrideJavaChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"></check>


    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="false">
        <parameters><parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter></parameters>
    </check>

    <!-- We want the opposite of this: NewLineAtEofChecker -->
    <check level="error" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"></check>

    <!-- This one complains about all kinds of random things. Disable. -->
    <check level="error" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="false"></check>

    <!-- We use return quite a bit for control flows and guards -->
    <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="false"></check>

    <!-- We use null a lot in low level code and to interface with 3rd party code -->
    <check level="error" class="org.scalastyle.scalariform.NullChecker" enabled="false"></check>

    <!-- Doesn't seem super big deal here ... -->
    <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="false"></check>

    <!-- Doesn't seem super big deal here ... -->
    <check level="error" class="org.scalastyle.file.FileLengthChecker" enabled="false">
        <parameters><parameter name="maxFileLength">800></parameter></parameters>
    </check>

    <!-- Doesn't seem super big deal here ... -->
    <check level="error" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="false">
        <parameters><parameter name="maxTypes">30</parameter></parameters>
    </check>

    <!-- Doesn't seem super big deal here ... -->
    <check level="error" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="false">
        <parameters><parameter name="maximum">10</parameter></parameters>
    </check>

    <!-- Doesn't seem super big deal here ... -->
    <check level="error" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="false">
        <parameters><parameter name="maxLength">50</parameter></parameters>
    </check>

    <!-- Not exactly feasible to enforce this right now. -->
    <!-- It is also infrequent that somebody introduces a new class with a lot of methods. -->
    <check level="error" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="false">
        <parameters><parameter name="maxMethods"><![CDATA[30]]></parameter></parameters>
    </check>

    <!-- Doesn't seem super big deal here, and we have a lot of magic numbers ... -->
    <check level="error" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="false">
        <parameters><parameter name="ignore">-1,0,1,2,3</parameter></parameters>
    </check>

</scalastyle>